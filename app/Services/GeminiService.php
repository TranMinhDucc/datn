<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

class GeminiService
{
    private $baseUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

    public function ask($prompt)
    {
        $apiKey = setting('gemini_api_key');

        if (!$apiKey) {
            return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key cho Gemini trong ph·∫ßn Settings!";
        }

        // Ph√¢n lo·∫°i c√¢u h·ªèi ƒë·ªÉ t·ªëi ∆∞u response
        $questionType = $this->classifyQuestion($prompt);

        // System prompt chi ti·∫øt v√† ƒë∆∞·ª£c t·ªëi ∆∞u
        $systemPrompt = $this->getSystemPrompt($questionType);

        $payload = [
            "contents" => [
                [
                    "role" => "user",
                    "parts" => [
                        ["text" => $systemPrompt]
                    ]
                ],
                [
                    "role" => "user",
                    "parts" => [
                        ["text" => "NG·ªÆ C·∫¢NH HI·ªÜN T·∫†I: " . now()->format('d/m/Y H:i') . " - H·ªá th·ªëng b√°n qu·∫ßn √°o"]
                    ]
                ],
                [
                    "role" => "user",
                    "parts" => [
                        ["text" => "C√ÇU H·ªéI: " . $prompt]
                    ]
                ]
            ],
            "generationConfig" => [
                "temperature" => 0.3,
                "topK" => 40,
                "topP" => 0.8,
                "maxOutputTokens" => 1024,
            ]
        ];

        // S·ª≠ d·ª•ng cache ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c v·ªõi c√πng c√¢u h·ªèi
        $cacheKey = 'gemini_response_' . md5($prompt);
        if (Cache::has($cacheKey)) {
            return Cache::get($cacheKey);
        }

        for ($i = 0; $i < 3; $i++) {
            try {
                $response = Http::timeout(30)
                    ->withHeaders([
                        'Content-Type' => 'application/json',
                    ])->post($this->baseUrl . "?key=" . $apiKey, $payload);

                Log::info('Gemini API request', [
                    'prompt' => $prompt,
                    'question_type' => $questionType
                ]);

                Log::info('Gemini API response', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);

                if ($response->successful()) {
                    $data = $response->json();

                    if (isset($data['candidates'][0]['content']['parts'][0]['text'])) {
                        $aiResponse = $data['candidates'][0]['content']['parts'][0]['text'];

                        // Th√™m g·ª£i √Ω ti·∫øp theo
                        $suggestion = $this->getFollowUpSuggestion($questionType);
                        $finalResponse = $aiResponse . "\n\nüí° " . $suggestion;

                        // Cache response trong 5 ph√∫t
                        Cache::put($cacheKey, $finalResponse, 300);

                        return $finalResponse;
                    }

                    return "ü§ñ Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung ph√π h·ª£p.";
                }

                if ($response->status() == 503) {
                    sleep(1);
                    continue;
                }

                break;
            } catch (\Exception $e) {
                Log::error('Gemini API error: ' . $e->getMessage());
                if ($i == 2) {
                    return "‚ö†Ô∏è L·ªói k·∫øt n·ªëi ƒë·∫øn Gemini: " . $e->getMessage();
                }
                sleep(1);
            }
        }

        // X·ª≠ l√Ω l·ªói
        if ($response->failed()) {
            $data = $response->json();
            if (isset($data['error']['message'])) {
                return "‚ö†Ô∏è L·ªói t·ª´ Gemini: " . $data['error']['message'];
            }
            return "‚ö†Ô∏è L·ªói khi g·ªçi Gemini API (HTTP {$response->status()})";
        }

        return "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Gemini. Vui l√≤ng th·ª≠ l·∫°i sau.";
    }

    /**
     * Ph√¢n lo·∫°i c√¢u h·ªèi ƒë·ªÉ t·ªëi ∆∞u prompt
     */
    private function classifyQuestion($prompt)
    {
        $prompt = mb_strtolower($prompt);

        $questionTypes = [
            'statistical' => ['doanh thu', 'th·ªëng k√™', 'bao nhi√™u', 't·ªïng', 'trung b√¨nh', 's·ªë l∆∞·ª£ng', 'ƒë·∫øm'],
            'analytical' => ['ph√¢n t√≠ch', 'so s√°nh', 'xu h∆∞·ªõng', 't·∫°i sao', 'nguy√™n nh√¢n', 'insight'],
            'predictive' => ['d·ª± b√°o', '∆∞·ªõc t√≠nh', 't∆∞∆°ng lai', 'd·ª± ƒëo√°n', 'forecast'],
            'recommendation' => ['g·ª£i √Ω', 'n√™n', 'c√°ch', 'chi·∫øn l∆∞·ª£c', 'gi·∫£i ph√°p', 'khuy√™n'],
            'product' => ['s·∫£n ph·∫©m', 'h√†ng h√≥a', 'qu·∫ßn √°o', '√°o', 'qu·∫ßn', 'ƒë·∫ßm', 'v√°y'],
            'customer' => ['kh√°ch h√†ng', 'user', 'ng∆∞·ªùi d√πng', 'kh√°ch', 'mua h√†ng']
        ];

        foreach ($questionTypes as $type => $keywords) {
            foreach ($keywords as $keyword) {
                if (str_contains($prompt, $keyword)) {
                    return $type;
                }
            }
        }

        return 'general';
    }

    /**
     * L·∫•y system prompt ph√π h·ª£p v·ªõi lo·∫°i c√¢u h·ªèi
     */
    private function getSystemPrompt($questionType)
    {
        $basePrompt = "B·∫°n l√† tr·ª£ l√Ω AI chuy√™n nghi·ªáp cho h·ªá th·ªëng b√°n qu·∫ßn √°o tr·ª±c tuy·∫øn. 
            TR·∫¢ L·ªúI B·∫∞NG TI·∫æNG VI·ªÜT, th√¢n thi·ªán, t·ª± nhi√™n nh∆∞ ƒëang tr√≤ chuy·ªán.
            S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ tƒÉng t√≠nh sinh ƒë·ªông.
            Lu√¥n trung th·ª±c - n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ n√≥i kh√¥ng bi·∫øt.
            ƒê·ªãnh d·∫°ng r√µ r√†ng: xu·ªëng d√≤ng, bullet points khi c·∫ßn thi·∫øt.
            
            QUY T·∫ÆC:
            - KH√îNG b·ªãa d·ªØ li·ªáu ho·∫∑c s·ªë li·ªáu
            - ∆Øu ti√™n s·ª± ch√≠nh x√°c thay v√¨ s√°ng t·∫°o
            - N·∫øu c·∫ßn th√™m th√¥ng tin, h√£y y√™u c·∫ßu c·ª• th·ªÉ
            - Gi·ªØ c√¢u tr·∫£ l·ªùi t·∫≠p trung v√† c√≥ gi√° tr·ªã";

        $typeSpecificPrompts = [
            'statistical' => "B·∫°n ƒëang tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ TH·ªêNG K√ä - t·∫≠p trung v√†o con s·ªë ch√≠nh x√°c, 
                so s√°nh d·ªØ li·ªáu, v√† ƒë∆∞a ra context cho c√°c con s·ªë.",

            'analytical' => "B·∫°n ƒëang tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ PH√ÇN T√çCH - t√¨m insights, xu h∆∞·ªõng, 
                nguy√™n nh√¢n k·∫øt qu·∫£, v√† ƒë∆∞a ra nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc.",

            'predictive' => "B·∫°n ƒëang tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ D·ª∞ B√ÅO - s·ª≠ d·ª•ng d·ªØ li·ªáu l·ªãch s·ª≠ 
                ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n c√≥ c∆° s·ªü, lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn ƒë·ªô tin c·∫≠y c·ªßa d·ª± b√°o.",

            'recommendation' => "B·∫°n ƒëang tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ G·ª¢I √ù - ƒë∆∞a ra gi·∫£i ph√°p th·ª±c t·∫ø, 
                kh·∫£ thi, v√† c√≥ t√≠nh ·ª©ng d·ª•ng cao cho doanh nghi·ªáp.",

            'product' => "B·∫°n ƒëang tr·∫£ l·ªùi v·ªÅ S·∫¢N PH·∫®M - t·∫≠p trung v√†o qu·∫ßn √°o, xu h∆∞·ªõng th·ªùi trang, 
                qu·∫£n l√Ω kho, v√† ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.",

            'customer' => "B·∫°n ƒëang tr·∫£ l·ªùi v·ªÅ KH√ÅCH H√ÄNG - ph√¢n t√≠ch h√†nh vi mua h√†ng, 
                segmentation, v√† insights v·ªÅ kh√°ch h√†ng."
        ];

        return $basePrompt . "\n\n" . ($typeSpecificPrompts[$questionType] ?? "H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch t·ªïng quan v√† h·ªØu √≠ch.");
    }

    /**
     * G·ª£i √Ω c√¢u h·ªèi ti·∫øp theo d·ª±a tr√™n lo·∫°i c√¢u h·ªèi hi·ªán t·∫°i
     */
    private function getFollowUpSuggestion($questionType)
    {
        $suggestions = [
            'statistical' => [
                "B·∫°n mu·ªën xem chi ti·∫øt theo tu·∫ßn/th√°ng kh√¥ng?",
                "B·∫°n c√≥ mu·ªën so s√°nh v·ªõi k·ª≥ tr∆∞·ªõc kh√¥ng?"
            ],
            'analytical' => [
                "B·∫°n mu·ªën ph√¢n t√≠ch s√¢u h∆°n v·ªÅ kh√≠a c·∫°nh n√†o?",
                "B·∫°n quan t√¢m ƒë·∫øn xu h∆∞·ªõng theo m√πa kh√¥ng?"
            ],
            'predictive' => [
                "B·∫°n mu·ªën d·ª± b√°o cho kho·∫£ng th·ªùi gian n√†o?",
                "B·∫°n c√≥ mu·ªën xem c√°c k·ªãch b·∫£n kh√°c nhau kh√¥ng?"
            ],
            'recommendation' => [
                "B·∫°n mu·ªën g·ª£i √Ω cho danh m·ª•c s·∫£n ph·∫©m c·ª• th·ªÉ?",
                "B·∫°n quan t√¢m ƒë·∫øn chi·∫øn l∆∞·ª£c gi√° hay marketing?"
            ],
            'product' => [
                "B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ danh m·ª•c s·∫£n ph·∫©m n√†o?",
                "B·∫°n quan t√¢m ƒë·∫øn t·ªìn kho hay doanh thu s·∫£n ph·∫©m?"
            ],
            'customer' => [
                "B·∫°n mu·ªën ph√¢n t√≠ch nh√≥m kh√°ch h√†ng c·ª• th·ªÉ?",
                "B·∫°n quan t√¢m ƒë·∫øn h√†nh vi mua hay demographics?"
            ],
            'general' => [
                "B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ doanh thu, s·∫£n ph·∫©m hay kh√°ch h√†ng?",
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch d·ªØ li·ªáu n√†o?"
            ]
        ];

        $selected = $suggestions[$questionType] ?? $suggestions['general'];
        return $selected[array_rand($selected)];
    }

    /**
     * Ph∆∞∆°ng th·ª©c m·ªõi: h·ªèi v·ªõi context d·ªØ li·ªáu th·ª±c
     */
    // ... (ph·∫ßn g·ªçi API t∆∞∆°ng t·ª± nh∆∞ method ask) l√† ghi ra lu√¥n cho t√¥i

    public function askWithContext($prompt, $contextData = [])
    {
        $apiKey = setting('gemini_api_key');
        if (!$apiKey) {
            return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key cho Gemini!";
        }

        $contextString = "";
        if (!empty($contextData)) {
            $contextString = "D·ªÆ LI·ªÜU TH·ª∞C T·∫æ:\n";
            foreach ($contextData as $key => $value) {
                $contextString .= "- {$key}: {$value}\n";
            }
        }

        $systemPrompt = "B·∫°n l√† AI ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø cho c·ª≠a h√†ng qu·∫ßn √°o. 
        D·ª±a v√†o d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c.
        N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·ªß, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥.
        Lu√¥n trung th·ª±c v√† d·ª±a tr√™n facts.
        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, s√∫c t√≠ch.
        S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ d·ªÖ hi·ªÉu.";

        $payload = [
            "contents" => [
                [
                    "role" => "user",
                    "parts" => [["text" => $systemPrompt]]
                ],
                [
                    "role" => "user",
                    "parts" => [["text" => $contextString]]
                ],
                [
                    "role" => "user",
                    "parts" => [["text" => "C√ÇU H·ªéI: " . $prompt]]
                ]
            ],
            "generationConfig" => [
                "temperature" => 0.1, // R·∫•t th·∫•p ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
                "topK" => 20,
                "topP" => 0.7,
                "maxOutputTokens" => 1024,
            ]
        ];

        // PH·∫¶N G·ªåI API T∆Ø∆†NG T·ª∞ NH∆Ø METHOD ASK
        for ($i = 0; $i < 3; $i++) {
            try {
                $response = Http::timeout(30)
                    ->withHeaders([
                        'Content-Type' => 'application/json',
                    ])->post($this->baseUrl . "?key=" . $apiKey, $payload);

                Log::info('Gemini API with context request', [
                    'prompt' => $prompt,
                    'context_data' => $contextData
                ]);

                Log::info('Gemini API with context response', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);

                if ($response->successful()) {
                    $data = $response->json();

                    if (isset($data['candidates'][0]['content']['parts'][0]['text'])) {
                        return $data['candidates'][0]['content']['parts'][0]['text'];
                    }

                    return "ü§ñ Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung ph√π h·ª£p cho c√¢u h·ªèi v·ªõi context.";
                }

                if ($response->status() == 503) {
                    sleep(1);
                    continue;
                }

                break;
            } catch (\Exception $e) {
                Log::error('Gemini API with context error: ' . $e->getMessage());
                if ($i == 2) {
                    return "‚ö†Ô∏è L·ªói k·∫øt n·ªëi ƒë·∫øn Gemini: " . $e->getMessage();
                }
                sleep(1);
            }
        }

        // X·ª≠ l√Ω l·ªói
        if (isset($response) && $response->failed()) {
            $data = $response->json();
            if (isset($data['error']['message'])) {
                return "‚ö†Ô∏è L·ªói t·ª´ Gemini: " . $data['error']['message'];
            }
            return "‚ö†Ô∏è L·ªói khi g·ªçi Gemini API (HTTP {$response->status()})";
        }

        return "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Gemini. Vui l√≤ng th·ª≠ l·∫°i sau.";
    }
}
