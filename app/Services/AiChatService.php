<?php

namespace App\Services;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\User;
use App\Models\Product;
use App\Models\Review;
use App\Models\Coupon;
use App\Models\ShippingAddress;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class AiChatService
{
    protected array $rules;

    public function __construct()
    {
        $this->rules = [
            // ===================== REVENUE & ORDERS =====================
            [
                'keywords' => ['doanh thu h√¥m nay', 'doanh s·ªë h√¥m nay', 'b√°n ƒë∆∞·ª£c h√¥m nay', 'thu nh·∫≠p h√¥m nay'],
                'action' => function () {
                    $total = Order::whereDate('created_at', today())->sum('total_amount');
                    $orders = Order::whereDate('created_at', today())->count();
                    $avgOrder = $orders > 0 ? $total / $orders : 0;

                    return "üìä **Doanh thu h√¥m nay**:\n" .
                        "üí∞ T·ªïng: " . number_format($total) . " VND\n" .
                        "üõí S·ªë ƒë∆°n: {$orders}\n" .
                        "üìà Trung b√¨nh/ƒë∆°n: " . number_format($avgOrder) . " VND";
                }
            ],

            [
                'keywords' => ['so s√°nh doanh thu tu·∫ßn', 'tƒÉng tr∆∞·ªüng tu·∫ßn', 'tu·∫ßn n√†y vs tu·∫ßn tr∆∞·ªõc'],
                'action' => function () {
                    $thisWeek = Order::whereBetween('created_at', [now()->startOfWeek(), now()->endOfWeek()])->sum('total_amount');
                    $lastWeek = Order::whereBetween('created_at', [now()->subWeek()->startOfWeek(), now()->subWeek()->endOfWeek()])->sum('total_amount');
                    $growth = $lastWeek > 0 ? (($thisWeek - $lastWeek) / $lastWeek) * 100 : 0;

                    return "üìä **So s√°nh tu·∫ßn**:\n" .
                        "üìÖ Tu·∫ßn n√†y: " . number_format($thisWeek) . " VND\n" .
                        "üìÖ Tu·∫ßn tr∆∞·ªõc: " . number_format($lastWeek) . " VND\n" .
                        "üìà TƒÉng tr∆∞·ªüng: " . ($growth > 0 ? '+' : '') . number_format($growth, 1) . "%";
                }
            ],

            // ===================== PRODUCT ANALYTICS =====================
            [
                'keywords' => ['s·∫£n ph·∫©m b√°n ch·∫°y theo m√πa', 'xu h∆∞·ªõng theo m√πa', 's·∫£n ph·∫©m hot m√πa'],
                'action' => function () {
                    $season = $this->getCurrentSeason();
                    $products = OrderItem::selectRaw('product_id, SUM(quantity) as total_sold')
                        ->whereHas('order', function ($q) {
                            $q->whereDate('created_at', '>=', now()->subMonth());
                        })
                        ->groupBy('product_id')
                        ->orderByDesc('total_sold')
                        ->with('product')
                        ->limit(5)
                        ->get();

                    $list = $products->map(function ($item, $index) {
                        return ($index + 1) . ". {$item->product->name} ({$item->total_sold} s·∫£n ph·∫©m)";
                    })->implode("\n");

                    return "üåü **Top s·∫£n ph·∫©m hot {$season}**:\n" . $list;
                }
            ],

            [
                'keywords' => ['size b√°n ch·∫°y nh·∫•t', 'size ph·ªï bi·∫øn', 'th·ªëng k√™ size'],
                'action' => function () {
                    $sizes = OrderItem::whereHas('productVariant')
                        ->with('productVariant')
                        ->get()
                        ->groupBy(function ($item) {
                            return $item->productVariant->size ?? 'N/A';
                        })
                        ->map(function ($group) {
                            return $group->sum('quantity');
                        })
                        ->sortDesc()
                        ->take(5);

                    $list = $sizes->map(function ($quantity, $size) {
                        return "Size {$size}: {$quantity} s·∫£n ph·∫©m";
                    })->implode("\n");

                    return "üëï **Th·ªëng k√™ size b√°n ch·∫°y**:\n" . $list;
                }
            ],

            [
                'keywords' => ['m√†u s·∫Øc b√°n ch·∫°y', 'm√†u ph·ªï bi·∫øn', 'xu h∆∞·ªõng m√†u'],
                'action' => function () {
                    $colors = OrderItem::whereHas('productVariant')
                        ->with('productVariant')
                        ->get()
                        ->groupBy(function ($item) {
                            return $item->productVariant->color ?? 'N/A';
                        })
                        ->map(function ($group) {
                            return $group->sum('quantity');
                        })
                        ->sortDesc()
                        ->take(5);

                    $list = $colors->map(function ($quantity, $color) {
                        return "üé® {$color}: {$quantity} s·∫£n ph·∫©m";
                    })->implode("\n");

                    return "üåà **Xu h∆∞·ªõng m√†u s·∫Øc**:\n" . $list;
                }
            ],

            // ===================== INVENTORY MANAGEMENT =====================
            [
                'keywords' => ['s·∫£n ph·∫©m c·∫ßn nh·∫≠p', 'h·∫øt h√†ng', 't·ªìn kho th·∫•p', 'b√°o ƒë·ªông kho'],
                'action' => function () {
                    $lowStock = Product::where('stock_quantity', '<=', 10)
                        ->orderBy('stock_quantity')
                        ->get();

                    if ($lowStock->isEmpty()) {
                        return "‚úÖ **Kho h√†ng ·ªïn ƒë·ªãnh** - Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn nh·∫≠p g·∫•p";
                    }

                    $urgent = $lowStock->where('stock_quantity', '<=', 5);
                    $warning = $lowStock->where('stock_quantity', '>', 5);

                    $result = "‚ö†Ô∏è **B√°o c√°o t·ªìn kho**:\n";

                    if ($urgent->count() > 0) {
                        $result .= "üî¥ **C·∫¶N NH·∫¨P G·∫§P** (‚â§5 s·∫£n ph·∫©m):\n";
                        $result .= $urgent->take(5)->map(function ($p, $i) {
                            return ($i + 1) . ". {$p->name} (c√≤n {$p->stock_quantity})";
                        })->implode("\n") . "\n";
                    }

                    if ($warning->count() > 0) {
                        $result .= "üü° **C·∫£nh b√°o** (6-10 s·∫£n ph·∫©m):\n";
                        $result .= $warning->take(3)->map(function ($p, $i) {
                            return ($i + 1) . ". {$p->name} (c√≤n {$p->stock_quantity})";
                        })->implode("\n");
                    }

                    return $result;
                }
            ],

            [
                'keywords' => ['d·ª± b√°o nhu c·∫ßu', 's·∫Ω h·∫øt h√†ng', 'xu h∆∞·ªõng ti√™u th·ª•'],
                'action' => function () {
                    $products = Product::withCount(['orderItems as sold_30_days' => function ($q) {
                        $q->whereHas('order', function ($subQ) {
                            $subQ->whereDate('created_at', '>=', now()->subDays(30));
                        });
                    }])->having('sold_30_days', '>', 0)->get();

                    $predictions = $products->map(function ($product) {
                        $avgDaily = $product->sold_30_days / 30;
                        $daysLeft = $avgDaily > 0 ? ceil($product->stock_quantity / $avgDaily) : 999;
                        return [
                            'name' => $product->name,
                            'current_stock' => $product->stock_quantity,
                            'days_left' => $daysLeft,
                            'avg_daily' => round($avgDaily, 1)
                        ];
                    })->sortBy('days_left')->take(5);

                    $result = "üîÆ **D·ª± b√°o h·∫øt h√†ng (30 ng√†y t·ªõi)**:\n";
                    foreach ($predictions as $i => $pred) {
                        $status = $pred['days_left'] <= 7 ? "üî¥" : ($pred['days_left'] <= 15 ? "üü°" : "üü¢");
                        $result .= ($i + 1) . ". {$status} {$pred['name']}: {$pred['days_left']} ng√†y (b√°n {$pred['avg_daily']}/ng√†y)\n";
                    }

                    return $result;
                }
            ],

            // ===================== CUSTOMER INSIGHTS =====================
            [
                'keywords' => ['kh√°ch h√†ng m·ªõi', 'tƒÉng tr∆∞·ªüng kh√°ch h√†ng', 'xu h∆∞·ªõng kh√°ch'],
                'action' => function () {
                    $newToday = User::whereDate('created_at', today())->count();
                    $newThisWeek = User::whereBetween('created_at', [now()->startOfWeek(), now()->endOfWeek()])->count();
                    $newThisMonth = User::whereMonth('created_at', now()->month)->count();
                    $totalActive = User::whereHas('orders', function ($q) {
                        $q->whereDate('created_at', '>=', now()->subDays(30));
                    })->count();

                    return "üë• **Th·ªëng k√™ kh√°ch h√†ng**:\n" .
                        "üÜï H√¥m nay: {$newToday}\n" .
                        "üìÖ Tu·∫ßn n√†y: {$newThisWeek}\n" .
                        "üìä Th√°ng n√†y: {$newThisMonth}\n" .
                        "‚ö° Ho·∫°t ƒë·ªông (30 ng√†y): {$totalActive}";
                }
            ],

            [
                'keywords' => ['kh√°ch h√†ng theo ƒë·ªô tu·ªïi', 'ph√¢n kh√∫c tu·ªïi', 'demographics'],
                'action' => function () {
                    // Gi·∫£ s·ª≠ c√≥ tr∆∞·ªùng age ho·∫∑c birth_date
                    $ageGroups = User::selectRaw('
                        CASE 
                            WHEN TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 18 AND 25 THEN "18-25"
                            WHEN TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 26 AND 35 THEN "26-35" 
                            WHEN TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) BETWEEN 36 AND 45 THEN "36-45"
                            WHEN TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) > 45 THEN "45+"
                            ELSE "Kh√¥ng x√°c ƒë·ªãnh"
                        END as age_group,
                        COUNT(*) as count
                    ')
                        ->whereNotNull('birth_date')
                        ->groupBy('age_group')
                        ->orderByDesc('count')
                        ->get();

                    $result = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Ph√¢n kh√∫c kh√°ch h√†ng theo tu·ªïi**:\n";
                    foreach ($ageGroups as $group) {
                        $result .= "‚Ä¢ {$group->age_group} tu·ªïi: {$group->count} kh√°ch h√†ng\n";
                    }

                    return $result;
                }
            ],

            // ===================== GEOGRAPHICAL INSIGHTS =====================
            [
                'keywords' => ['b·∫£n ƒë·ªì b√°n h√†ng', 'khu v·ª±c ti·ªÅm nƒÉng', 'th·ªã tr∆∞·ªùng ƒë·ªãa l√Ω'],
                'action' => function () {
                    $topCities = Order::join('shipping_addresses', 'orders.address_id', '=', 'shipping_addresses.id')
                        ->selectRaw('shipping_addresses.city, COUNT(*) as order_count, SUM(total_amount) as revenue')
                        ->groupBy('shipping_addresses.city')
                        ->orderByDesc('revenue')
                        ->limit(10)
                        ->get();

                    $result = "üó∫Ô∏è **Top th·ªã tr∆∞·ªùng theo doanh thu**:\n";
                    foreach ($topCities as $i => $city) {
                        $result .= ($i + 1) . ". {$city->city}: " . number_format($city->revenue) . " VND ({$city->order_count} ƒë∆°n)\n";
                    }

                    return $result;
                }
            ],

            // ===================== MARKETING INSIGHTS =====================
            [
                'keywords' => ['hi·ªáu qu·∫£ m√£ gi·∫£m gi√°', 'coupon analytics', 'khuy·∫øn m√£i'],
                'action' => function () {
                    $coupons = Coupon::withCount('orders')
                        ->withSum('orders', 'total_amount')
                        ->having('orders_count', '>', 0)
                        ->orderByDesc('orders_sum_total_amount')
                        ->limit(5)
                        ->get();

                    $result = "üéüÔ∏è **Top m√£ gi·∫£m gi√° hi·ªáu qu·∫£**:\n";
                    foreach ($coupons as $i => $coupon) {
                        $result .= ($i + 1) . ". {$coupon->code}: {$coupon->orders_count} l·∫ßn s·ª≠ d·ª•ng - " .
                            number_format($coupon->orders_sum_total_amount) . " VND\n";
                    }

                    return $result ?: "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu m√£ gi·∫£m gi√°";
                }
            ],

            [
                'keywords' => ['gi·ªè h√†ng b·ªè d·ªü', 'cart abandonment', 'kh√°ch b·ªè gi·ªè h√†ng'],
                'action' => function () {
                    // Logic ƒë·ªÉ t√≠nh t·ª∑ l·ªá gi·ªè h√†ng b·ªè d·ªü
                    $totalCarts = DB::table('carts')->count();
                    $completedOrders = Order::whereDate('created_at', '>=', now()->subDays(7))->count();
                    $abandonmentRate = $totalCarts > 0 ? (($totalCarts - $completedOrders) / $totalCarts) * 100 : 0;

                    return "üõí **Ph√¢n t√≠ch gi·ªè h√†ng**:\n" .
                        "üìä T·ªïng gi·ªè h√†ng: {$totalCarts}\n" .
                        "‚úÖ Ho√†n th√†nh: {$completedOrders}\n" .
                        "‚ùå T·ª∑ l·ªá b·ªè d·ªü: " . number_format($abandonmentRate, 1) . "%\n" .
                        "üí° " . ($abandonmentRate > 70 ? "C·∫ßn c·∫£i thi·ªán UX checkout" : "T·ª∑ l·ªá ch·∫•p nh·∫≠n ƒë∆∞·ª£c");
                }
            ],

            // ===================== ADVANCED ANALYTICS =====================
            [
                'keywords' => ['rfm analysis', 'ph√¢n t√≠ch rfm', 'kh√°ch vip', 'kh√°ch r·ªùi b·ªè'],
                'action' => function () {
                    $customers = User::with(['orders' => function ($q) {
                        $q->where('status', 'completed');
                    }])->get()->map(function ($user) {
                        if ($user->orders->isEmpty()) return null;

                        return [
                            'name' => $user->fullname ?? $user->username,
                            'recency' => $user->orders->max('created_at')->diffInDays(now()),
                            'frequency' => $user->orders->count(),
                            'monetary' => $user->orders->sum('total_amount')
                        ];
                    })->filter();

                    $vip = $customers->where('frequency', '>=', 5)->where('monetary', '>=', 1000000)->take(5);
                    $atRisk = $customers->where('recency', '>', 60)->where('frequency', '>=', 2)->take(5);

                    // === Gi·∫£i th√≠ch RFM ===
                    $result = "üìä **Ph√¢n t√≠ch RFM** (Recency - Frequency - Monetary):\n";
                    $result .= "- **Recency (R)**: s·ªë ng√†y k·ªÉ t·ª´ l·∫ßn mua g·∫ßn nh·∫•t\n";
                    $result .= "- **Frequency (F)**: s·ªë l·∫ßn mua h√†ng\n";
                    $result .= "- **Monetary (M)**: t·ªïng ti·ªÅn ƒë√£ chi ti√™u\n\n";

                    // === VIP ===
                    if ($vip->count() > 0) {
                        $result .= "üíé **Kh√°ch h√†ng VIP** (‚â•5 ƒë∆°n, ‚â•1M VND):\n";
                        foreach ($vip as $c) {
                            $result .= "‚Ä¢ {$c['name']}: {$c['frequency']} ƒë∆°n, " .
                                number_format($c['monetary']) . " VND\n";
                        }
                    } else {
                        $result .= "üíé Kh√¥ng c√≥ kh√°ch h√†ng VIP n√†o.\n";
                    }

                    // === At Risk ===
                    if ($atRisk->count() > 0) {
                        $result .= "\n‚ö†Ô∏è **Kh√°ch c√≥ nguy c∆° r·ªùi b·ªè** (>60 ng√†y kh√¥ng mua):\n";
                        foreach ($atRisk as $c) {
                            $result .= "‚Ä¢ {$c['name']}: l·∫ßn cu·ªëi {$c['recency']} ng√†y tr∆∞·ªõc\n";
                        }
                    } else {
                        $result .= "\n‚ö†Ô∏è Ch∆∞a ph√°t hi·ªán kh√°ch n√†o c√≥ nguy c∆° r·ªùi b·ªè.";
                    }

                    return $result;
                }
            ],


            [
                'keywords' => ['d·ª± b√°o doanh thu', 'forecast', 'xu h∆∞·ªõng t∆∞∆°ng lai'],
                'action' => function () {
                    // T√≠nh to√°n doanh thu 7 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ d·ª± b√°o
                    $last7Days = collect();
                    for ($i = 6; $i >= 0; $i--) {
                        $date = now()->subDays($i)->format('Y-m-d');
                        $revenue = Order::whereDate('created_at', $date)->sum('total_amount');
                        $last7Days->push($revenue);
                    }

                    $avgDaily = $last7Days->avg();
                    $trend = 0;
                    if ($last7Days->count() > 1 && $last7Days->first() > 0) {
                        $trend = (($last7Days->last() - $last7Days->first()) / $last7Days->first()) * 100;
                    }

                    $forecastWeek = $avgDaily * 7;
                    $forecastMonth = $avgDaily * 30;

                    return "üîÆ **D·ª± b√°o doanh thu**:\n" .
                        "üìà Trung b√¨nh ng√†y: " . number_format($avgDaily) . " VND\n" .
                        "üìä Xu h∆∞·ªõng 7 ng√†y: " . ($trend > 0 ? '+' : '') . number_format($trend, 1) . "%\n" .
                        "üéØ D·ª± b√°o tu·∫ßn t·ªõi: " . number_format($forecastWeek) . " VND\n" .
                        "üéØ D·ª± b√°o th√°ng t·ªõi: " . number_format($forecastMonth) . " VND";
                }
            ],

            // ===================== OPERATIONAL INSIGHTS =====================
            // [
            //     'keywords' => ['th·ªùi gian giao h√†ng', 'delivery performance', 'hi·ªáu su·∫•t v·∫≠n chuy·ªÉn'],
            //     'action' => function () {
            //         $avgDeliveryTime = Order::whereNotNull('delivered_at')
            //             ->selectRaw('AVG(TIMESTAMPDIFF(DAY, created_at, delivered_at)) as avg_days')
            //             ->first()->avg_days;

            //         $onTimeDelivery = Order::whereNotNull('delivered_at')
            //             ->whereRaw('TIMESTAMPDIFF(DAY, created_at, delivered_at) <= expected_delivery_days')
            //             ->count();

            //         $totalDelivered = Order::whereNotNull('delivered_at')->count();
            //         $onTimeRate = $totalDelivered > 0 ? ($onTimeDelivery / $totalDelivered) * 100 : 0;

            //         return "üöö **Hi·ªáu su·∫•t giao h√†ng**:\n" .
            //             "‚è±Ô∏è Th·ªùi gian trung b√¨nh: " . number_format($avgDeliveryTime, 1) . " ng√†y\n" .
            //             "‚úÖ T·ª∑ l·ªá ƒë√∫ng h·∫πn: " . number_format($onTimeRate, 1) . "%\n" .
            //             "üì¶ T·ªïng ƒë∆°n ƒë√£ giao: {$totalDelivered}";
            //     }
            // ],

            [
                'keywords' => ['review analysis', 'ƒë√°nh gi√° s·∫£n ph·∫©m', 'feedback kh√°ch h√†ng'],
                'action' => function () {
                    $avgRating = Review::avg('rating');
                    $totalReviews = Review::count();
                    $ratingDistribution = Review::selectRaw('rating, COUNT(*) as count')
                        ->groupBy('rating')
                        ->orderByDesc('rating')
                        ->get();

                    $result = "‚≠ê **Ph√¢n t√≠ch ƒë√°nh gi√°**:\n";
                    $result .= "üìä ƒêi·ªÉm trung b√¨nh: " . number_format($avgRating, 1) . "/5 ({$totalReviews} ƒë√°nh gi√°)\n\n";

                    foreach ($ratingDistribution as $dist) {
                        $percentage = ($dist->count / $totalReviews) * 100;
                        $stars = str_repeat('‚≠ê', $dist->rating);
                        $result .= "{$stars} {$dist->rating}: {$dist->count} ({$percentage}%)\n";
                    }

                    return $result;
                }
            ],

            // Th√™m c√°c rule c≈© ƒë√£ c√≥...
            [
                'keywords' => ['doanh thu h√¥m qua', 'doanh s·ªë h√¥m qua'],
                'action' => function () {
                    $total = Order::whereDate('created_at', today()->subDay())->sum('total_amount');
                    return "üìä Doanh thu h√¥m qua: " . number_format($total) . " VND";
                }
            ],
        ];
    }

    private function getCurrentSeason(): string
    {
        $month = now()->month;

        if ($month >= 3 && $month <= 5) return "m√πa xu√¢n";
        if ($month >= 6 && $month <= 8) return "m√πa h√®";
        if ($month >= 9 && $month <= 11) return "m√πa thu";
        return "m√πa ƒë√¥ng";
    }

    public function process(string $prompt, GeminiService $gemini): string
    {
        $prompt = mb_strtolower($prompt);

        // Ki·ªÉm tra context v√† ƒë∆∞a ra g·ª£i √Ω th√¥ng minh
        if (str_contains($prompt, 'g·ª£i √Ω') || str_contains($prompt, 't∆∞ v·∫•n') || str_contains($prompt, 'n√™n l√†m g√¨')) {
            return $this->generateSmartSuggestions();
        }

        foreach ($this->rules as $rule) {
            foreach ($rule['keywords'] as $keyword) {
                if (str_contains($prompt, $keyword)) {
                    Log::info("‚úÖ Match rule: {$keyword}");
                    return $rule['action']();
                }
            }
        }

        // Enhanced context cho Gemini
        $context = $this->buildContextForGemini();
        $enhancedPrompt = "B·∫°n l√† AI assistant cho website b√°n qu·∫ßn √°o. Context hi·ªán t·∫°i: {$context}\n\nC√¢u h·ªèi: {$prompt}";

        Log::info("üëâ Kh√¥ng kh·ªõp rule, g·ªçi Gemini v·ªõi context");
        return $gemini->ask($enhancedPrompt);
    }

    private function buildContextForGemini(): string
    {
        $todayRevenue = Order::whereDate('created_at', today())->sum('total_amount');
        $todayOrders = Order::whereDate('created_at', today())->count();
        $totalProducts = Product::count();
        $lowStockCount = Product::where('stock_quantity', '<=', 5)->count();

        return "Doanh thu h√¥m nay: " . number_format($todayRevenue) . " VND, " .
            "{$todayOrders} ƒë∆°n h√†ng, {$totalProducts} s·∫£n ph·∫©m, {$lowStockCount} s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng.";
    }

    private function generateSmartSuggestions(): string
    {
        $suggestions = [
            "üí° **G·ª£i √Ω th√¥ng minh cho b·∫°n:**",
            "",
            "üìä **Ph√¢n t√≠ch kinh doanh:**",
            "‚Ä¢ 'so s√°nh doanh thu tu·∫ßn' - Xem xu h∆∞·ªõng tƒÉng tr∆∞·ªüng",
            "‚Ä¢ 'd·ª± b√°o doanh thu' - L·∫≠p k·∫ø ho·∫°ch t∆∞∆°ng lai",
            "‚Ä¢ 'rfm analysis' - T√¨m kh√°ch h√†ng VIP",
            "",
            "üëï **Qu·∫£n l√Ω s·∫£n ph·∫©m:**",
            "‚Ä¢ 'size b√°n ch·∫°y nh·∫•t' - T·ªëi ∆∞u kho h√†ng",
            "‚Ä¢ 'm√†u s·∫Øc b√°n ch·∫°y' - N·∫Øm b·∫Øt xu h∆∞·ªõng",
            "‚Ä¢ 'd·ª± b√°o nhu c·∫ßu' - Tr√°nh h·∫øt h√†ng",
            "",
            "üéØ **Marketing & Kh√°ch h√†ng:**",
            "‚Ä¢ 'hi·ªáu qu·∫£ m√£ gi·∫£m gi√°' - ƒêo l∆∞·ªùng campaign",
            "‚Ä¢ 'gi·ªè h√†ng b·ªè d·ªü' - C·∫£i thi·ªán conversion",
            "‚Ä¢ 'kh√°ch h√†ng theo ƒë·ªô tu·ªïi' - Ph√¢n kh√∫c th·ªã tr∆∞·ªùng"
        ];

        return implode("\n", $suggestions);
    }
}
