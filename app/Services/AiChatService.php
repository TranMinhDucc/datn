<?php

namespace App\Services;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\User;
use Illuminate\Support\Facades\Log;

class AiChatService
{
    protected array $rules;

    public function __construct()
    {
        $this->rules = [

            [
                'keywords' => ['doanh thu h√¥m nay', 'doanh s·ªë h√¥m nay', 'b√°n ƒë∆∞·ª£c h√¥m nay', 'thu nh·∫≠p h√¥m nay'],
                'action' => function () {
                    $total = Order::whereDate('created_at', today())->sum('total_amount');
                    return "üìä Doanh thu h√¥m nay: " . number_format($total) . " VND";
                }
            ],
            [
                'keywords' => ['doanh thu h√¥m qua', 'doanh s·ªë h√¥m qua', 'b√°n ƒë∆∞·ª£c h√¥m qua', 'thu nh·∫≠p h√¥m qua'],
                'action' => function () {
                    $total = Order::whereDate('created_at', today()->subDay())->sum('total_amount');
                    return "üìä Doanh thu h√¥m qua: " . number_format($total) . " VND";
                }
            ],
            [
                'keywords' => ['doanh thu tu·∫ßn n√†y', 'doanh s·ªë tu·∫ßn n√†y'],
                'action' => function () {
                    $total = Order::whereBetween('created_at', [now()->startOfWeek(), now()->endOfWeek()])
                        ->sum('total_amount');
                    return "üìä Doanh thu tu·∫ßn n√†y: " . number_format($total) . " VND";
                }
            ],
            [
                'keywords' => ['doanh thu th√°ng n√†y', 'doanh s·ªë th√°ng n√†y'],
                'action' => function () {
                    $total = Order::whereMonth('created_at', now()->month)
                        ->whereYear('created_at', now()->year)
                        ->sum('total_amount');
                    return "üìä Doanh thu th√°ng n√†y: " . number_format($total) . " VND";
                }
            ],

            // ===================== USER =====================
            [
                'keywords' => ['user n·∫°p nhi·ªÅu nh·∫•t', 'kh√°ch h√†ng n·∫°p nhi·ªÅu nh·∫•t', 'ai chi nhi·ªÅu nh·∫•t'],
                'action' => function () {
                    $topUser = User::withSum('orders', 'total_amount')
                        ->orderByDesc('orders_sum_total_amount')
                        ->first();

                    return $topUser
                        ? "üëë User n·∫°p nhi·ªÅu nh·∫•t: {$topUser->fullname} ({$topUser->email}) v·ªõi " .
                        number_format($topUser->orders_sum_total_amount) . " VND"
                        : "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu user n·∫°p.";
                }
            ],
            [
                'keywords' => ['t·ªïng user', 'bao nhi√™u user', 'c√≥ bao nhi√™u kh√°ch h√†ng'],
                'action' => function () {
                    $count = User::count();
                    return "üë• T·ªïng s·ªë user hi·ªán t·∫°i: {$count}";
                }
            ],
            [
                'keywords' => ['user m·ªõi h√¥m nay', 'kh√°ch h√†ng m·ªõi h√¥m nay', 'ƒëƒÉng k√Ω h√¥m nay'],
                'action' => function () {
                    $count = User::whereDate('created_at', today())->count();
                    return "üÜï User m·ªõi h√¥m nay: {$count}";
                }
            ],
            [
                'keywords' => ['top 5 s·∫£n ph·∫©m', '5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t', 'top s·∫£n ph·∫©m tu·∫ßn'],
                'action' => function () {
                    $topProducts = OrderItem::selectRaw('product_id, SUM(quantity) as total')
                        ->groupBy('product_id')
                        ->orderByDesc('total')
                        ->with('product')
                        ->limit(5)
                        ->get();

                    if ($topProducts->isEmpty()) {
                        return "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m b√°n ch·∫°y.";
                    }

                    $list = $topProducts->map(function ($item, $index) {
                        return ($index + 1) . ". {$item->product->name} ({$item->total} ƒë∆°n)";
                    })->implode("\n");

                    return "üî• Top 5 s·∫£n ph·∫©m b√°n ch·∫°y:\n" . $list;
                }
            ],
            [
                'keywords' => ['ƒë∆°n h√†ng th√°ng n√†y', 'bao nhi√™u ƒë∆°n th√°ng n√†y'],
                'action' => function () {
                    $count = Order::whereMonth('created_at', now()->month)
                        ->whereYear('created_at', now()->year)
                        ->count();
                    return "üõí S·ªë ƒë∆°n h√†ng th√°ng n√†y: {$count}";
                }
            ],
            [
                'keywords' => ['gi√° tr·ªã trung b√¨nh ƒë∆°n h√¥m nay', 'trung b√¨nh ƒë∆°n h√¥m nay'],
                'action' => function () {
                    $avg = Order::whereDate('created_at', today())->avg('total_amount');
                    return "üíµ Gi√° tr·ªã trung b√¨nh m·ªói ƒë∆°n h√¥m nay: " . number_format($avg, 0) . " VND";
                }
            ],


            // ===================== ƒê∆†N H√ÄNG =====================
            [
                'keywords' => ['ƒë∆°n h√†ng h√¥m nay', 'bao nhi√™u ƒë∆°n h√¥m nay', 'h√¥m nay c√≥ m·∫•y ƒë∆°n'],
                'action' => function () {
                    $orders = Order::whereDate('created_at', today())->count();
                    return "üõí S·ªë ƒë∆°n h√†ng h√¥m nay: {$orders}";
                }
            ],

            // ===================== S·∫¢N PH·∫®M =====================
            [
                'keywords' => ['s·∫£n ph·∫©m b√°n ch·∫°y', 'm·∫∑t h√†ng b√°n ch·∫°y', 'top s·∫£n ph·∫©m'],
                'action' => function () {
                    $topProduct = OrderItem::selectRaw('product_id, SUM(quantity) as total')
                        ->groupBy('product_id')
                        ->orderByDesc('total')
                        ->with('product')
                        ->first();

                    return $topProduct
                        ? "üî• S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t: {$topProduct->product->name} ({$topProduct->total} ƒë∆°n)"
                        : "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m b√°n ch·∫°y.";
                }
            ],
            [
                'keywords' => ['so s√°nh doanh thu th√°ng', 'tƒÉng tr∆∞·ªüng doanh thu', 'ph·∫ßn trƒÉm tƒÉng tr∆∞·ªüng'],
                'action' => function () {
                    $currentMonth = Order::whereMonth('created_at', now()->month)
                        ->whereYear('created_at', now()->year)
                        ->sum('total_amount');

                    $lastMonth = Order::whereMonth('created_at', now()->subMonth()->month)
                        ->whereYear('created_at', now()->subMonth()->year)
                        ->sum('total_amount');

                    $growth = $lastMonth ? (($currentMonth - $lastMonth) / $lastMonth) * 100 : 0;

                    return "üìà So s√°nh doanh thu: 
                    ‚Ä¢ Th√°ng n√†y: " . number_format($currentMonth) . " VND
                    ‚Ä¢ Th√°ng tr∆∞·ªõc: " . number_format($lastMonth) . " VND
                    ‚Ä¢ TƒÉng tr∆∞·ªüng: " . number_format($growth, 2) . "%";
                }
            ],
            [
                'keywords' => ['s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng', 'h√†ng t·ªìn kho √≠t', 'c·∫ßn nh·∫≠p h√†ng'],
                'action' => function () {
                    $lowStock = Product::where('stock_quantity', '<=', 5)
                        ->orderBy('stock_quantity')
                        ->limit(5)
                        ->get();

                    if ($lowStock->isEmpty()) {
                        return "‚úÖ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho";
                    }

                    $list = $lowStock->map(function ($product, $index) {
                        return ($index + 1) . ". {$product->name} (C√≤n {$product->stock_quantity} s·∫£n ph·∫©m)";
                    })->implode("\n");

                    return "‚ö†Ô∏è C√°c s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng:\n" . $list;
                }
            ],
            [
                'keywords' => ['kh√°ch h√†ng th√¢n thi·∫øt', 'vip pro', 'kh√°ch h√†ng trung th√†nh'],
                'action' => function () {
                    $loyalCustomers = User::withCount('orders')
                        ->withSum('orders', 'total_amount')
                        ->having('orders_count', '>', 3)
                        ->orderByDesc('orders_sum_total_amount')
                        ->limit(5)
                        ->get();

                    if ($loyalCustomers->isEmpty()) {
                        return "‚ö†Ô∏è Ch∆∞a c√≥ kh√°ch h√†ng th√¢n thi·∫øt";
                    }

                    $list = $loyalCustomers->map(function ($user, $index) {
                        return ($index + 1) . ". {$user->fullname} - {$user->orders_count} ƒë∆°n - " .
                            number_format($user->orders_sum_total_amount) . " VND";
                    })->implode("\n");

                    return "üéØ Top kh√°ch h√†ng th√¢n thi·∫øt:\n" . $list;
                }
            ],
            [
                'keywords' => ['khu v·ª±c mua nhi·ªÅu', 'th√†nh ph·ªë mua nhi·ªÅu', 't·ªânh th√†nh ph·ªï bi·∫øn'],
                'action' => function () {
                    $popularCities = Order::selectRaw('shipping_city, COUNT(*) as order_count')
                        ->groupBy('shipping_city')
                        ->orderByDesc('order_count')
                        ->limit(5)
                        ->get();

                    $list = $popularCities->map(function ($city, $index) {
                        return ($index + 1) . ". {$city->shipping_city} ({$city->order_count} ƒë∆°n)";
                    })->implode("\n");

                    return "üó∫Ô∏è C√°c khu v·ª±c mua h√†ng nhi·ªÅu nh·∫•t:\n" . $list;
                }
            ]
        ];
    }

    public function process(string $prompt, GeminiService $gemini): string
    {
        $prompt = mb_strtolower($prompt);

        foreach ($this->rules as $rule) {
            foreach ($rule['keywords'] as $keyword) {
                if (str_contains($prompt, $keyword)) {
                    Log::info("‚úÖ Match rule: {$keyword}");
                    return $rule['action']();
                }
            }
        }

        // N·∫øu kh√¥ng kh·ªõp rule n√†o th√¨ fallback v·ªÅ Gemini
        Log::info("üëâ Kh√¥ng kh·ªõp rule, g·ªçi Gemini v·ªõi prompt: " . $prompt);
        return $gemini->ask($prompt);
    }
}
