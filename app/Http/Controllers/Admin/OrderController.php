<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Order;
use App\Models\PartnerLocationCode;
use App\Models\ShippingOrder;
use App\Models\ShopSetting;
use App\Services\GhnService;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class OrderController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $orders = Order::with(['user', 'shippingOrder'])->orderBy('id', 'desc')->paginate(10);
        return view('admin.orders.index', compact('orders'));
    }



    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $order = Order::with(['user', 'shippingLogs', 'orderItems.product', 'paymentMethod', 'address'])->findOrFail($id);

        return view('admin.orders.show', compact('order'));
    }

    public function updateStatus(Request $request, Order $order)
    {
        $validated = $request->validate([
            'status' => 'required|in:pending,confirmed,shipping,completed,cancelled'
        ]);

        $order->status = $validated['status'];
        $order->save();

        return back()->with('success', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.');
    }
    public function cancel()
    {
        $orders = Order::where('cancel_request', true)
            ->orderBy('updated_at', 'desc')
            ->paginate(10);

        return view('admin.orders.cancel', compact('orders'));
    }
    public function retryShipping($orderId)
    {
        Log::info('üì¶ retryShipping called with order id: ' . $orderId);

        // T√¨m ƒë∆°n GHN trong b·∫£ng shipping_orders
        $shippingOrder = ShippingOrder::where('order_id', $orderId)
            ->where('shipping_partner', 'ghn')
            ->latest()
            ->first();

        if (!$shippingOrder || !$shippingOrder->shipping_code) {
            return back()->with('error', '‚ùå Kh√¥ng t√¨m th·∫•y m√£ GHN cho ƒë∆°n h√†ng.');
        }

        // G·ªçi API GHN ƒë·ªÉ l·∫•y tr·∫°ng th√°i hi·ªán t·∫°i
        $statusResponse = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Token' => config('services.ghn.token'),
        ])->post('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/detail', [
            'order_code' => $shippingOrder->shipping_code,
        ]);

        $currentStatus = $statusResponse->json('data.status') ?? 'unknown';
        Log::info("üì¶ Tr·∫°ng th√°i GHN hi·ªán t·∫°i c·ªßa {$shippingOrder->shipping_code} l√†: $currentStatus");

        // ‚úÖ Ch·ªâ cho ph√©p retry n·∫øu tr·∫°ng th√°i l√† waiting_to_return ho·∫∑c delivery_fail
        $allowedStatuses = ['waiting_to_return', 'delivery_fail'];
        if (!in_array($currentStatus, $allowedStatuses)) {
            return back()->with('error', "‚ö†Ô∏è Kh√¥ng th·ªÉ giao l·∫°i ƒë∆°n h√†ng v√¨ tr·∫°ng th√°i hi·ªán t·∫°i l√†: $currentStatus.");
        }

        // G·ªçi API GHN ƒë·ªÉ chuy·ªÉn tr·∫°ng th√°i ƒë∆°n h√†ng sang "storing"
        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Token' => config('services.ghn.token'),
            'ShopId' => config('services.ghn.shop_id'),
        ])->post('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/switch-status/storing', [
            'order_codes' => [$shippingOrder->shipping_code]
        ]);

        $responseData = $response->json();
        Log::info('üîÅ GHN Retry Shipping response', $responseData);

        if ($response->successful() && $responseData['code'] == 200) {
            $result = $responseData['data'][0]['result'] ?? false;
            $ghnMessage = $responseData['data'][0]['message'] ?? 'Kh√¥ng r√µ th√¥ng b√°o';

            if ($result === true) {
                Log::info('‚úÖ Giao l·∫°i ƒë∆°n GHN th√†nh c√¥ng', [
                    'order_id' => $orderId,
                    'shipping_code' => $shippingOrder->shipping_code,
                ]);
                return back()->with('success', '‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu giao l·∫°i ƒë∆°n h√†ng th√†nh c√¥ng.');
            }

            Log::warning("‚ö†Ô∏è GHN t·ª´ ch·ªëi giao l·∫°i ƒë∆°n (m√£: {$shippingOrder->shipping_code}) v√¨: $ghnMessage");
            return back()->with('error', "‚ö†Ô∏è GHN t·ª´ ch·ªëi giao l·∫°i ƒë∆°n: $ghnMessage. Tr·∫°ng th√°i hi·ªán t·∫°i: $currentStatus");
        }

        Log::error('‚ùå L·ªói khi g·ª≠i l·∫°i ƒë∆°n GHN', [
            'order_id' => $orderId,
            'shipping_code' => $shippingOrder->shipping_code,
            'response' => $response->body(),
        ]);

        return back()->with('error', '‚ùå Giao l·∫°i ƒë∆°n h√†ng th·∫•t b·∫°i: ' . ($responseData['message'] ?? 'Kh√¥ng r√µ l·ªói'));
    }
    public function cancelShippingOrder($orderId)
    {
        Log::info('üõë B·∫Øt ƒë·∫ßu hu·ª∑ ƒë∆°n GHN cho order_id: ' . $orderId);

        $shippingOrder = ShippingOrder::where('order_id', $orderId)
            ->where('shipping_partner', 'ghn')
            ->latest()
            ->first();

        if (!$shippingOrder || !$shippingOrder->shipping_code) {
            return back()->with('error', '‚ùå Kh√¥ng t√¨m th·∫•y m√£ GHN.');
        }

        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Token' => config('services.ghn.token'),
            'ShopId' => config('services.ghn.shop_id'),
        ])->post('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/switch-status/cancel', [
            'order_codes' => [$shippingOrder->shipping_code]
        ]);

        $data = $response->json('data')[0] ?? [];
        $result = $data['result'] ?? false;
        $message = $data['message'] ?? 'Kh√¥ng r√µ l√Ω do';

        Log::info('üõë GHN Cancel response', $response->json());

        if ($result === true) {
            // ‚úÖ C·∫≠p nh·∫≠t status trong b·∫£ng orders
            Order::where('id', $orderId)->update(['status' => 'cancelled']);

            Log::info('‚úÖ Hu·ª∑ ƒë∆°n GHN th√†nh c√¥ng & c·∫≠p nh·∫≠t DB', [
                'order_id' => $orderId,
                'shipping_code' => $shippingOrder->shipping_code,
            ]);

            return back()->with('success', '‚úÖ Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng.');
        } else {
            Log::warning('‚ö†Ô∏è GHN t·ª´ ch·ªëi hu·ª∑ ƒë∆°n', [
                'order_id' => $orderId,
                'shipping_code' => $shippingOrder->shipping_code,
                'ghn_message' => $message,
            ]);

            return back()->with('error', '‚ö†Ô∏è GHN t·ª´ ch·ªëi hu·ª∑ ƒë∆°n: ' . $message);
        }
    }

    public function approveCancel(Order $order)
    {
        if ($order->cancel_request && $order->status === 'confirmed') {
            $order->status = 'cancelled';
            $order->cancel_request = false;
            $order->cancelled_at = now();
            $order->save();

            return back()->with('success', 'ƒê√£ duy·ªát y√™u c·∫ßu h·ªßy ƒë∆°n.');
        }

        return back()->with('error', 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë∆°n ƒë√£ b·ªã h·ªßy.');
    }

    public function rejectCancel(Order $order)
    {
        if ($order->cancel_request && $order->status === 'confirmed') {
            $order->cancel_request = false;
            $order->save();

            return back()->with('success', 'ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu h·ªßy ƒë∆°n.');
        }

        return back()->with('error', 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.');
    }



    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }

    public function createShippingOrder(array $data)
    {
        // Ghi log debug Token v√† ShopId
        Log::info('GHN Token + ShopID', [
            'token' => env('GHN_TOKEN'),
            'shop_id' => env('GHN_SHOP_ID'),
        ]);

        // Ghi log payload g·ª≠i GHN
        Log::info('GHN Payload g·ª≠i ƒëi', $data);

        // G·ª≠i y√™u c·∫ßu POST
        $response = Http::withHeaders([
            'Token' => env('GHN_TOKEN'),
            'Content-Type' => 'application/json',
            'ShopId' => env('GHN_SHOP_ID'),
        ])->post('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create', $data);

        // Ghi l·∫°i ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß t·ª´ GHN
        Log::info('GHN Response Raw', [
            'status' => $response->status(),
            'body'   => $response->body(),
        ]);

        // N·∫øu th√†nh c√¥ng
        if ($response->successful() && isset($response['data']['order_code'])) {
            Log::info('GHN Order Created', [
                'order_code' => $response['data']['order_code'],
            ]);
            return $response['data']['order_code'];
        }

        // N·∫øu th·∫•t b·∫°i, ghi log chi ti·∫øt ƒë·ªÉ ƒëi·ªÅu tra
        Log::error('GHN Order Error', [
            'request' => $data,
            'response_status' => $response->status(),
            'response_body' => $response->body(),
        ]);

        return false;
    }

    public function confirmGHN($id, Request $request, GhnService $service)
    {
        $order = Order::with('items.productVariant.product', 'user', 'address')->findOrFail($id);

        if ($order->status !== 'pending') {
            return redirect()->back()->with('error', 'ƒê∆°n h√†ng kh√¥ng th·ªÉ g·ª≠i ƒëi do tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.');
        }

        $totalWeight = 0;
        $maxLength = 0;
        $maxWidth = 0;
        $totalHeight = 0;

        // T√≠nh to√°n l·∫°i ch√≠nh x√°c k√≠ch th∆∞·ªõc v√† c√¢n n·∫∑ng
        foreach ($order->items as $item) {
            $variant = $item->productVariant;

            $totalWeight += $variant->weight * $item->quantity;

            if ($variant->length > $maxLength) {
                $maxLength = $variant->length;
            }

            if ($variant->width > $maxWidth) {
                $maxWidth = $variant->width;
            }

            $totalHeight += $variant->height * $item->quantity;
        }

        $toDistrictId = PartnerLocationCode::where([
            'type' => 'district',
            'location_id' => $order->address->district_id,
            'partner_code' => 'ghn'
        ])->value('partner_id');

        $toWardCode = PartnerLocationCode::where([
            'type' => 'ward',
            'location_id' => $order->address->ward_id,
            'partner_code' => 'ghn'
        ])->value('partner_id');

        Log::info('ƒê·ªäA CH·ªà GHN', [
            'district_id n·ªôi b·ªô' => $order->address->district_id,
            'ward_id n·ªôi b·ªô' => $order->address->ward_id,
            'mapped to_district_id' => $toDistrictId,
            'mapped to_ward_code' => $toWardCode,
        ]);
        $shop = ShopSetting::with(['province', 'district', 'ward'])->first();
        $availableServices = Http::withHeaders([
            'Token' => config('services.ghn.token'),
            'Content-Type' => 'application/json',
        ])->post('https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/available-services', [
            'shop_id' => (int) config('services.ghn.shop_id'),
            'from_district' => $shop->district->ghn_district_id ?? 3440, // b·∫°n c√≥ th·ªÉ map ri√™ng n·∫øu c·∫ßn
            'to_district'   => (int)$toDistrictId,
        ]);

        $serviceId = data_get($availableServices->json(), 'data.0.service_id');

        if (!$serviceId) {
            Log::error('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c service_id t·ª´ GHN', $availableServices->json());
            return redirect()->back()->with('error', 'GHN kh√¥ng tr·∫£ v·ªÅ service_id h·ª£p l·ªá.');
        }
        $data = [
            'from_name'           => $shop->shop_name,
            'from_phone'          => $shop->shop_phone,
            'from_address'        => $shop->address,
            'from_ward_name'      => optional($shop->ward)->name,
            'from_district_name'  => optional($shop->district)->name,
            'from_province_name'  => optional($shop->province)->name,
            'payment_type_id'     => 1,
            'note'                => 'Giao h√†ng cho kh√°ch',
            'required_note'       => 'KHONGCHOXEMHANG',
            'to_name'             => $order->address->full_name,
            'to_phone'            => $order->address->phone,
            'to_address'          => $order->address->address,
            'to_district_id'      => $toDistrictId,
            'to_ward_code'        => (string)$toWardCode,
            'weight'              => $totalWeight ?: 100,
            'length'              => $maxLength ?: 10,
            'width'               => $maxWidth ?: 10,
            'height'              => $totalHeight ?: 10,
            'service_id' => $serviceId,
            'items' => $order->items->map(function ($item) {
                return [
                    'name' => $item->productVariant->product->name,
                    'quantity' => $item->quantity,
                    'code' => $item->productVariant->sku,
                    'image' => asset('storage/' . $item->productVariant->product->image),
                    'weight' => $item->productVariant->weight,
                ];
            })->toArray(),


        ];

        Log::info('GHN Request', $data);

        $ghnOrderCode = $service->createShippingOrder($data);

        if ($ghnOrderCode) {
            $order->update([
                'status' => 'confirmed',
                'ghn_order_code' => $ghnOrderCode
            ]);
            ShippingOrder::create([
                'order_id' => $order->id,
                'shipping_partner' => 'ghn',
                'shipping_code' => $ghnOrderCode,
                'status' => 'ready_to_pick',
                'note' => 'ƒê∆°n h√†ng g·ª≠i GHN th√†nh c√¥ng',
                'request_payload' => json_encode($data),
                'response_payload' => json_encode(['order_code' => $ghnOrderCode]),
            ]);

            return redirect()->back()->with('success', 'ƒê√£ g·ª≠i ƒë∆°n h√†ng sang GHN!');
        }

        return redirect()->back()->with('error', '‚ùå G·ª≠i ƒë∆°n h√†ng ƒë·∫øn GHN th·∫•t b·∫°i.');
    }
}
